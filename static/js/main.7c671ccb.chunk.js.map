{"version":3,"sources":["shared/utility.ts","store/actions/auth.tsx","store/actions/actionTypes.tsx","store/reducers/selectors.tsx","components/Login/Login.tsx","consts.ts","hooks/useChat.tsx","components/ChatRoom/MessagesList/MessagesList.tsx","components/ChatRoom/ChatRoom.tsx","themes/theme.tsx","themes/global.tsx","components/UI/AlertBox/AlertBox.tsx","App.tsx","hooks/useDarkMode.tsx","serviceWorker.tsx","store/reducers/auth.tsx","store/reducers/index.tsx","api/user.ts","shared/axios.ts","store/sagas/auth.tsx","store/sagas/index.tsx","index.tsx","components/ChatRoom/ChatRoom.module.scss","components/Login/Login.module.scss","components/ChatRoom/MessagesList/MessagesList.module.scss","App.module.scss"],"names":["updateObject","oldState","updatedProperties","typedAction","type","payload","transformDateToUnix","currentDate","moment","unix","signInWithUsernameSuccess","user","getUserFromLocalStorageSuccess","selectCurrentUser","state","authReducer","selectSignInLoading","loading","selectSignInError","error","userExists","createSelector","currentUser","Form","styled","form","theme","loginLabel","Container","div","attrs","props","className","Label","label","Input","input","formInput","text","Button","button","formButton","background","color","Login","useState","showButton","setShowButton","username","setUsername","useSelector","dispatch","useDispatch","signInUsername","signInWithUsername","containerClasses","push","styles","join","onClick","CSSTransition","in","timeout","unmountOnExit","classNames","appear","AppearActive","appearDone","Appeared","enterActive","InputEntering","enterDone","InputEntered","exitActive","InputClosing","onSubmit","e","preventDefault","connectToChatRoom","onChange","target","value","placeholder","disabled","BASE_URL","process","useChat","messages","setMessages","socketRef","useRef","useEffect","current","socketIOClient","on","message","reverse","fetchLatestMessages","disconnect","emit","sendMessage","body","createdAt","MessageItem","userId","messageClass","_id","Sent","Received","timestamp","date","Date","fromNow","transformUnixToDateSent","Message","Username","Timestamp","React","memo","content","map","item","index","key","List","ChatRoom","toggleTheme","scrollToDummyDiv","setMessage","scrollIntoView","behavior","submitMessage","Header","Section","Main","ref","onKeyPress","isMobile","shiftKey","textareaEnterPressed","Textarea","fontSize","style","lightTheme","darkTheme","GlobalStyles","createGlobalStyle","AlertBox","open","closeAlert","handleClose","event","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","action","Fragment","IconButton","size","aria-label","App","setTheme","componentMounted","setComponentMounted","setMode","mode","window","localStorage","setItem","localTheme","getItem","useDarkMode","themeMode","isAuthenticated","tryAutomaticSignin","useCallback","SwitchTransition","addEndListener","node","done","addEventListener","enter","FadeEnter","FadeEnterActive","exit","FadeExit","FadeExitActive","Boolean","location","hostname","match","initialState","signInWithUsernameStartHelper","signInWithUsernameSuccessHelper","signInWithUsernameFailedHelper","logoutUserSuccessHelper","getUserFromLocalStorage","closeSnackbar","rootReducer","combineReducers","userApi","this","post","response","data","api","apiConfig","baseURL","headers","common","Accept","axios","create","interceptors","use","res","Promise","reject","url","config","get","delete","put","signInUsernameSaga","logoutUserSaga","getUserFromLocalStorageSaga","delay","call","signinNewUser","JSON","stringify","parse","takeEvery","rootSaga","all","AuthSagas","composeEnhancers","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.7c671ccb.chunk.js","sourcesContent":["import moment from \"moment\";\r\n\r\nexport function updateObject<T, U>(oldState: T, updatedProperties: U): T {\r\n    return { ...oldState, ...updatedProperties };\r\n}\r\n\r\nexport function typedAction<T extends string>(type: T): { type: T };\r\n\r\nexport function typedAction<T extends string, P extends any>(\r\n    type: T,\r\n    payload: P\r\n): { type: T; payload: P };\r\n\r\nexport function typedAction(type: string, payload?: any) {\r\n    return { type, payload };\r\n}\r\n\r\nexport const transformDateToUnix = (): number => {\r\n    const currentDate = moment();\r\n    return moment(currentDate).unix();\r\n}\r\n\r\nexport const transformUnixToDateSent = (timestamp: number): string => {\r\n    const date = new Date(timestamp * 1000);\r\n    return moment(date).fromNow();\r\n}","import * as actionTypes from './actionTypes';\r\nimport { typedAction } from '../../shared/utility';\r\nimport { User } from '../../types';\r\n\r\nexport const signInWithUsername = (user: User) => {\r\n    return typedAction(actionTypes.SIGN_IN_USERNAME, user);\r\n}\r\n\r\nexport const signInWithUsernameStart = () => {\r\n    return typedAction(actionTypes.SIGN_IN_USERNAME_START);\r\n}\r\n\r\nexport const signInWithUsernameSuccess = (user: User) => {\r\n    return typedAction(actionTypes.SIGN_IN_USERNAME_SUCCESS, user);\r\n}\r\n\r\nexport const signInWithUsernameFailed = (error: string) => {\r\n    return typedAction(actionTypes.SIGN_IN_USERNAME_FAILED, error);\r\n}\r\n\r\nexport const logoutUser = () => {\r\n    return typedAction(actionTypes.LOGOUT_USER);\r\n}\r\n\r\nexport const logoutUserSuccess = () => {\r\n    return typedAction(actionTypes.LOGOUT_USER_SUCCESS);\r\n}\r\n\r\nexport const getUserFromLocalStorage = () => {\r\n    return typedAction(actionTypes.GET_USER_LOCAL_STORAGE);\r\n}\r\n\r\nexport const getUserFromLocalStorageSuccess = (user: User | null) => {\r\n    return typedAction(actionTypes.GET_USER_LOCAL_STORAGE_SUCCESS, user);\r\n}\r\n\r\nexport const closeSnackbar = () => {\r\n    return typedAction(actionTypes.CLOSE_SNACKBAR);\r\n}\r\n\r\nexport type AuthActions =\r\n    ReturnType<\r\n        typeof signInWithUsername |\r\n        typeof signInWithUsernameSuccess |\r\n        typeof signInWithUsernameStart |\r\n        typeof signInWithUsernameFailed |\r\n        typeof logoutUser |\r\n        typeof logoutUserSuccess |\r\n        typeof getUserFromLocalStorage |\r\n        typeof getUserFromLocalStorageSuccess |\r\n        typeof closeSnackbar\r\n    >;","export const SIGN_IN_USERNAME_SUCCESS = 'SIGN_IN_USERNAME_SUCCESS';\r\nexport const SIGN_IN_USERNAME_FAILED = 'SIGN_IN_USERNAME_FAILED';\r\nexport const SIGN_IN_USERNAME_START = 'SIGN_IN_USERNAME_START';\r\nexport const SIGN_IN_USERNAME = 'SIGN_IN_USERNAME';\r\n\r\nexport const LOGOUT_USER_SUCCESS = 'LOGOUT_USER_SUCCESS';\r\nexport const LOGOUT_USER = 'LOGOUT_USER';\r\n\r\nexport const GET_USER_LOCAL_STORAGE_SUCCESS = 'GET_USER_LOCAL_STORAGE_SUCCESS';\r\nexport const GET_USER_LOCAL_STORAGE = 'GET_USER_LOCAL_STORAGE';\r\n\r\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR';","import { RootState } from './index';\r\nimport { createSelector } from 'reselect';\r\n\r\nexport const selectCurrentUser = (state: RootState) => state.authReducer.user;\r\nexport const selectSignInLoading = (state: RootState) => state.authReducer.loading;\r\nexport const selectSignInError = (state: RootState) => state.authReducer.error;\r\n\r\nexport const userExists = createSelector(\r\n    selectCurrentUser, currentUser => {\r\n        return currentUser !== null;\r\n    }\r\n)","import React, { useState } from 'react';\r\nimport styles from './Login.module.scss';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { signInWithUsername } from '../../store/actions/auth';\r\nimport { selectSignInLoading } from '../../store/reducers/selectors';\r\nimport { User } from '../../types';\r\nimport styled from 'styled-components'\r\n\r\nconst Form = styled.form`\r\npadding: 0.625em;\r\nbox-sizing: border-box;\r\nbox-shadow: 0 0.125em 0.3125em rgba(0, 0, 0, 0.3);\r\ndisplay: flex;\r\njustify-content: center;\r\nwidth: 100%;\r\nborder-radius: 6.25em;\r\nbackground-color: ${({ theme }) => theme.loginLabel};`\r\n\r\nconst Container = styled.div.attrs(props => ({\r\n    className: props.className\r\n}))`\r\n&.WithInput {\r\n    width: 400px;\r\n    transition: 300ms;\r\n}\r\nwidth: 200px;\r\nheight: 65px;\r\nposition: relative;\r\nfont-weight: 700;\r\nbox-sizing: border-box;\r\nbox-shadow: 0 0.125em 0.3125em rgba(0, 0, 0, 0.3);\r\ndisplay: flex;\r\njustify-content: center;\r\nborder-radius: 6.25em;\r\nbackground-color: ${({ theme }) => theme.loginLabel};\r\ntransition: 300ms;\r\n`;\r\n\r\nconst Label = styled.label`\r\nborder-radius: 6.25em;\r\nbackground-color: ${({ theme }) => theme.loginLabel};\r\nwidth: 200px;\r\nheight: 65px;\r\noutline: 0;\r\nborder: none;\r\ncursor: pointer;\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nfont-size: 20px;\r\n`;\r\n\r\nconst Input = styled.input`\r\nfont-weight: 700;\r\nfont-size: 18px;\r\nborder: 0;\r\noutline: 0;\r\nborder-radius: 5em;\r\nbox-sizing: border-box;\r\nheight: 100%;\r\nwidth: 100%;\r\npadding: 0 0.714em;\r\nbackground-color: ${({ theme }) => theme.formInput};\r\ncolor: ${({ theme }) => theme.text};`;\r\n\r\nconst Button = styled.button`\r\nbackground-color: ${({ theme }) => theme.formButton.background};\r\ncolor: ${({ theme }) => theme.formButton.color};\r\nheight: 100%;\r\nwidth: auto;\r\nfont-size: 18px;\r\npadding: 0;\r\nheight: 100%;\r\nwidth: 160px;\r\nborder: 0;\r\nfont-weight: 700;\r\noutline: 0;\r\nborder-radius: 5em;\r\nbox-sizing: border-box;\r\ncursor: pointer;`\r\n\r\nconst Login: React.FC = () => {\r\n    const [showButton, setShowButton] = useState(true);\r\n    const [username, setUsername] = useState('');\r\n\r\n    const loading = useSelector(selectSignInLoading);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const signInUsername = (user: User) => dispatch(signInWithUsername(user));\r\n\r\n    const containerClasses = [];\r\n    if (!showButton) {\r\n        containerClasses.push('WithInput');\r\n    }\r\n\r\n    const connectToChatRoom = (e: React.SyntheticEvent<EventTarget>) => {\r\n        e.preventDefault();\r\n        setShowButton(true);\r\n        const newUser: User = { username }\r\n        signInUsername(newUser);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.Login}>\r\n            <Container className={containerClasses.join(' ')}>\r\n                {showButton && <Label\r\n                    onClick={() => !loading && setShowButton(false)}>\r\n                    {loading ? 'Connecting...' : 'Start Chatting!'}\r\n                </Label>}\r\n                <CSSTransition\r\n                    in={!showButton}\r\n                    timeout={300}\r\n                    unmountOnExit\r\n                    classNames={{\r\n                        appear: styles.AppearActive,\r\n                        appearDone: styles.Appeared,\r\n                        enterActive: styles.InputEntering,\r\n                        enterDone: styles.InputEntered,\r\n                        exitActive: styles.InputClosing\r\n                    }}>\r\n                    <Form onSubmit={(e) => connectToChatRoom(e)}>\r\n                        <Input\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                            type=\"text\"\r\n                            placeholder=\"Username\" />\r\n                        <Button disabled={username === ''} type=\"submit\">Let's Go!</Button>\r\n                    </Form>\r\n                </CSSTransition>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","export const BASE_URL = process.env.REACT_APP_API_URI || '';;\r\nexport const NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\r\nexport const INIT_MESSAGES = 'initMessages'\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { BASE_URL, INIT_MESSAGES, NEW_CHAT_MESSAGE_EVENT } from \"../consts\";\r\nimport { transformDateToUnix } from \"../shared/utility\";\r\nimport { selectCurrentUser } from \"../store/reducers/selectors\";\r\nimport { Message } from \"../types\";\r\n\r\nconst useChat = () => {\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const user = useSelector(selectCurrentUser);\r\n    const socketRef = useRef<SocketIOClient.Socket>();\r\n\r\n    useEffect(() => {\r\n\r\n        socketRef.current = socketIOClient(BASE_URL);\r\n\r\n        socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message: Message) => {\r\n            setMessages((messages) => [...messages, message]);\r\n        });\r\n\r\n        socketRef.current.on(INIT_MESSAGES, (messages: Message[]) => {\r\n            setMessages(messages.reverse());\r\n        });\r\n\r\n        fetchLatestMessages();\r\n\r\n        return () => {\r\n            socketRef.current?.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    const sendMessage = (message: string) => {\r\n        socketRef.current?.emit(NEW_CHAT_MESSAGE_EVENT, {\r\n            user: user,\r\n            body: message,\r\n            createdAt: transformDateToUnix()\r\n        });\r\n    };\r\n\r\n    const fetchLatestMessages = () => {\r\n        socketRef.current?.emit(INIT_MESSAGES);\r\n    }\r\n\r\n    return { messages, sendMessage, user };\r\n};\r\n\r\nexport default useChat;","import React from 'react';\r\nimport { transformUnixToDateSent } from '../../../shared/utility';\r\nimport { Message } from '../../../types';\r\nimport styles from './MessagesList.module.scss';\r\n\r\ninterface ListProps {\r\n    messages: Message[];\r\n    userId: string | undefined;\r\n}\r\n\r\ninterface ItemProps {\r\n    message: Message;\r\n    userId: string | undefined;\r\n}\r\n\r\nconst MessageItem: React.FC<ItemProps> = ({ message, userId }) => {\r\n    const messageClass = userId === message.user._id ? styles.Sent : styles.Received;\r\n    const timestamp = transformUnixToDateSent(message.createdAt);\r\n    return (\r\n        <div className={`${styles.Message} ${messageClass}`}>\r\n            {userId !== message.user._id && <p\r\n                className={styles.Username}>\r\n                {message.user.username}\r\n            </p>}\r\n            <p>{message.body}</p>\r\n            <p className={styles.Timestamp}>{timestamp}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst MessagesList: React.FC<ListProps> = ({ messages, userId }) => {\r\n    const content = messages.map((item, index) => (\r\n        <MessageItem\r\n            key={`${item._id}${index}`}\r\n            message={item}\r\n            userId={userId}\r\n        />\r\n    ));\r\n    return (\r\n        <div className={styles.List}>\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(MessagesList);","import React, { useEffect, useRef, useState } from 'react';\r\nimport styles from './ChatRoom.module.scss';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { logoutUser } from '../../store/actions/auth';\r\nimport { useDispatch } from 'react-redux';\r\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\r\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\r\nimport useChat from '../../hooks/useChat';\r\nimport MessagesList from './MessagesList/MessagesList';\r\nimport { isMobile } from 'react-device-detect';\r\n\r\ninterface Props {\r\n    theme: string;\r\n    toggleTheme: () => void;\r\n}\r\n\r\nconst ChatRoom: React.FC<Props> = ({ theme, toggleTheme }) => {\r\n    const { messages, sendMessage, user } = useChat();\r\n    const scrollToDummyDiv = useRef<HTMLDivElement>(null);\r\n\r\n    const [message, setMessage] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const logoutCurrentUser = () => dispatch(logoutUser());\r\n\r\n    const textareaEnterPressed = (e: React.KeyboardEvent) => {\r\n\r\n        if (isMobile) return;\r\n        if (e.key === 'Enter' && !e.shiftKey) {\r\n            submitMessage(e);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        scrollToDummyDiv.current?.scrollIntoView({\r\n            behavior: 'smooth'\r\n        });\r\n    }, [messages]);\r\n\r\n    const submitMessage = (e: React.SyntheticEvent<EventTarget>) => {\r\n        e.preventDefault();\r\n        setMessage('');\r\n        sendMessage(message);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.ChatRoom}>\r\n            <header className={styles.Header}>\r\n                <button onClick={logoutCurrentUser}>LOGOUT</button>\r\n                {theme === 'light'\r\n                    ? <Brightness4Icon onClick={toggleTheme} />\r\n                    : <Brightness7Icon onClick={toggleTheme} />}\r\n            </header>\r\n            <section className={styles.Section}>\r\n                <main className={styles.Main}>\r\n                    <MessagesList messages={messages} userId={user?._id && user._id} />\r\n                    <div ref={scrollToDummyDiv}></div>\r\n                </main>\r\n                <form className={styles.Form} onSubmit={submitMessage}>\r\n                    <textarea\r\n                        placeholder=\"Start typing here...\"\r\n                        value={message}\r\n                        onKeyPress={e => textareaEnterPressed(e)}\r\n                        onChange={e => setMessage(e.target.value)}\r\n                        className={styles.Textarea}></textarea>\r\n                    {message !== '' && <button className={styles.Button} type=\"submit\">\r\n                        <SendIcon fontSize=\"large\" style={{ color: '#6649b8' }} />\r\n                    </button>}\r\n                </form>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;","import { DefaultTheme } from \"styled-components\"\r\n\r\ndeclare module \"styled-components\" {\r\n    export interface DefaultTheme {\r\n        loginLabel: string;\r\n        formButton: {\r\n            color: string;\r\n            background: string;\r\n        };\r\n        formInput: string;\r\n        body: string;\r\n        text: string;\r\n    }\r\n}\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n    loginLabel: '#1c1f25',\r\n    formButton: {\r\n        color: '#1c1f25',\r\n        background: 'white'\r\n    },\r\n    formInput: '#1c1f25',\r\n    body: '#E2E2E2',\r\n    text: 'white'\r\n}\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n    loginLabel: 'white',\r\n    formButton: {\r\n        color: 'white',\r\n        background: '#282c34'\r\n    },\r\n    formInput: 'white',\r\n    body: '#1c1f25',\r\n    text: '#1c1f25'\r\n}","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  *,\r\n  *::after,\r\n  *::before {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  body {\r\n    font-size: 10px;\r\n    background-color: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    height: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: \"Open Sans\", sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }`","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { useDispatch } from 'react-redux';\r\nimport { closeSnackbar } from '../../../store/actions/auth';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    error: string;\r\n}\r\n\r\nconst AlertBox: React.FC<Props> = ({ open, error }) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const closeAlert = () => dispatch(closeSnackbar());\r\n\r\n    const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        closeAlert();\r\n    };\r\n\r\n    return (\r\n        <Snackbar\r\n            anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n            }}\r\n            open={open}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose}\r\n            message={error}\r\n            action={\r\n                <React.Fragment>\r\n                    <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n                        <CloseIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                </React.Fragment>\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default AlertBox;","import React, { useCallback, useEffect } from 'react';\r\nimport styles from './App.module.scss';\r\nimport Login from './components/Login/Login';\r\nimport { CSSTransition, SwitchTransition } from 'react-transition-group';\r\nimport ChatRoom from './components/ChatRoom/ChatRoom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectSignInError, userExists } from './store/reducers/selectors';\r\nimport { getUserFromLocalStorage } from './store/actions/auth';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { darkTheme, lightTheme } from './themes/theme';\r\nimport { GlobalStyles } from './themes/global';\r\nimport { useDarkMode } from './hooks/useDarkMode';\r\nimport AlertBox from './components/UI/AlertBox/AlertBox';\r\n\r\n\r\nconst App: React.FC = () => {\r\n  const { theme, toggleTheme, componentMounted } = useDarkMode();\r\n  const themeMode = theme === 'light' ? lightTheme : darkTheme;\r\n\r\n  const isAuthenticated = useSelector(userExists);\r\n  const error = useSelector(selectSignInError);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const tryAutomaticSignin = useCallback(() => dispatch(getUserFromLocalStorage()), [dispatch]);\r\n\r\n  useEffect(() => {\r\n    tryAutomaticSignin();\r\n  }, [tryAutomaticSignin])\r\n\r\n  if (!componentMounted) {\r\n    return <div />\r\n  };\r\n  return (\r\n    <ThemeProvider theme={themeMode}>\r\n      <GlobalStyles />\r\n      <div className={styles.App}>\r\n        <SwitchTransition mode=\"out-in\">\r\n          <CSSTransition\r\n            key={isAuthenticated ? \"ChatRoom\" : \"Login\"}\r\n            addEndListener={(node, done) => node.addEventListener(\"transitionend\", done, false)}\r\n            classNames={{\r\n              enter: styles.FadeEnter,\r\n              enterActive: styles.FadeEnterActive,\r\n              exit: styles.FadeExit,\r\n              exitActive: styles.FadeExitActive\r\n            }}>\r\n            {isAuthenticated ? <ChatRoom toggleTheme={toggleTheme} theme={theme} /> : <Login />}\r\n          </CSSTransition>\r\n        </SwitchTransition>\r\n      </div>\r\n      <AlertBox open={error !== ''} error={error} />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useEffect, useState } from 'react';\r\nexport const useDarkMode = () => {\r\n    const [theme, setTheme] = useState('light');\r\n    const [componentMounted, setComponentMounted] = useState(false);\r\n\r\n    const setMode = (mode: string) => {\r\n        window.localStorage.setItem('theme', mode)\r\n        setTheme(mode)\r\n    };\r\n\r\n    const toggleTheme = () => {\r\n        if (theme === 'light') {\r\n            setMode('dark');\r\n        } else {\r\n            setMode('light');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const localTheme = window.localStorage.getItem('theme');\r\n        if (localTheme) {\r\n            setTheme(localTheme);\r\n        } else {\r\n            setMode('light');\r\n        }\r\n        setComponentMounted(true);\r\n    }, []);\r\n\r\n    return {\r\n        theme, toggleTheme, componentMounted\r\n    }\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../../shared/utility';\r\nimport { AuthActions } from '../actions/auth';\r\nimport { User } from '../../types';\r\n\r\ninterface AuthState {\r\n    user: User | null;\r\n    loading: boolean;\r\n    error: string;\r\n}\r\n\r\nconst initialState: AuthState = {\r\n    user: null,\r\n    loading: false,\r\n    error: ''\r\n}\r\n\r\nconst authReducer = (state = initialState, action: AuthActions) => {\r\n    switch (action.type) {\r\n        case actionTypes.SIGN_IN_USERNAME_START:\r\n            return signInWithUsernameStartHelper(state);\r\n        case actionTypes.SIGN_IN_USERNAME_SUCCESS:\r\n            return signInWithUsernameSuccessHelper(state, action.payload);\r\n        case actionTypes.SIGN_IN_USERNAME_FAILED:\r\n            return signInWithUsernameFailedHelper(state, action.payload);\r\n        case actionTypes.LOGOUT_USER_SUCCESS:\r\n            return logoutUserSuccessHelper(state);\r\n        case actionTypes.GET_USER_LOCAL_STORAGE_SUCCESS:\r\n            return getUserFromLocalStorage(state, action.payload);\r\n        case actionTypes.CLOSE_SNACKBAR:\r\n            return closeSnackbar(state);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst signInWithUsernameStartHelper = (state: AuthState): AuthState => {\r\n    return updateObject(state, { loading: true });\r\n}\r\n\r\nconst signInWithUsernameSuccessHelper = (state: AuthState, payload: User): AuthState => {\r\n    return updateObject(state, { user: payload, loading: false, error: '' });\r\n}\r\n\r\nconst signInWithUsernameFailedHelper = (state: AuthState, payload: string): AuthState => {\r\n    return updateObject(state, { loading: false, error: payload });\r\n}\r\n\r\nconst logoutUserSuccessHelper = (state: AuthState): AuthState => {\r\n    return updateObject(state, { user: null });\r\n}\r\n\r\nconst getUserFromLocalStorage = (state: AuthState, payload: User | null): AuthState => {\r\n    return updateObject(state, { user: payload });\r\n}\r\n\r\nconst closeSnackbar = (state: AuthState): AuthState => {\r\n    return updateObject(state, { error: '' });\r\n}\r\n\r\nexport default authReducer;\r\n","import { combineReducers } from 'redux';\r\nimport authReducer from './auth';\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    authReducer: authReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { Api } from \"../shared/axios\";\r\nimport { User } from \"../types\";\r\n\r\nclass UserApi extends Api {\r\n\r\n    public async signinNewUser(user: User): Promise<User> {\r\n        const response = await this.post<User, User>('/user/signin', user);\r\n        return response.data;\r\n    }\r\n\r\n}\r\n\r\nexport const userApi = new UserApi();","import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { BASE_URL } from \"../consts\";\r\n\r\nexport class Api {\r\n    private api: AxiosInstance;\r\n\r\n    private apiConfig: AxiosRequestConfig = {\r\n        timeout: 15000,\r\n        baseURL: BASE_URL,\r\n        headers: {\r\n            common: {\r\n                \"Content-Type\": \"application/json\",\r\n                Accept: \"application/json\",\r\n            },\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        this.api = axios.create(this.apiConfig);\r\n\r\n        this.api.interceptors.response.use((res: AxiosResponse) => res, (error: AxiosError) => {\r\n            return Promise.reject(error.response?.data.message);\r\n        });\r\n    }\r\n\r\n    public get<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.get(url, config);\r\n    }\r\n\r\n    public post<T, D, R = AxiosResponse<T>>(url: string, data: D, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.post(url, data, config);\r\n    }\r\n\r\n    public delete<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.delete(url, config);\r\n    }\r\n\r\n    public put<T, D, R = AxiosResponse<T>>(url: string, data: D, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.put(url, data, config);\r\n    }\r\n}","import { call, delay, put, takeEvery } from 'redux-saga/effects';\r\nimport * as actionTypes from '../actions/actionTypes';\r\nimport { getUserFromLocalStorageSuccess, logoutUserSuccess, signInWithUsernameFailed, signInWithUsernameStart, signInWithUsernameSuccess } from '../actions/auth';\r\nimport { userApi } from '../../api/user';\r\nimport { User } from '../../types';\r\n\r\nfunction* signInUsernameSaga(action: ReturnType<typeof signInWithUsernameSuccess>) {\r\n    yield put(signInWithUsernameStart());\r\n    yield delay(500);\r\n    try {\r\n        const user: User = yield call(() => userApi.signinNewUser(action.payload));\r\n        yield call([localStorage, 'setItem'], 'currentUser', JSON.stringify(user));\r\n        yield put(signInWithUsernameSuccess(user));\r\n    } catch (e) {\r\n        yield put(signInWithUsernameFailed(e));\r\n    }\r\n}\r\n\r\nfunction* logoutUserSaga() {\r\n    yield call([localStorage, 'removeItem'], 'currentUser');\r\n    yield delay(300);\r\n    yield put(logoutUserSuccess());\r\n}\r\n\r\nfunction* getUserFromLocalStorageSaga() {\r\n    const user = yield call([localStorage, 'getItem'], 'currentUser');\r\n    yield put(getUserFromLocalStorageSuccess(JSON.parse(user)));\r\n}\r\n\r\n\r\nexport default [\r\n    takeEvery(actionTypes.SIGN_IN_USERNAME, signInUsernameSaga),\r\n    takeEvery(actionTypes.LOGOUT_USER, logoutUserSaga),\r\n    takeEvery(actionTypes.GET_USER_LOCAL_STORAGE, getUserFromLocalStorageSaga)\r\n\r\n]\r\n","import AuthSagas from './auth';\r\nimport { all } from 'redux-saga/effects';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        ...AuthSagas\r\n    ])\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './store/reducers';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './store/sagas/index';\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatRoom\":\"ChatRoom_ChatRoom__1wWXC\",\"Header\":\"ChatRoom_Header__1nsHl\",\"Section\":\"ChatRoom_Section__3G7Gw\",\"Main\":\"ChatRoom_Main__3yd-j\",\"Form\":\"ChatRoom_Form__S9-hN\",\"Textarea\":\"ChatRoom_Textarea__B0n_x\",\"Button\":\"ChatRoom_Button__3toSy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login_Login__DI4NL\",\"InputEntering\":\"Login_InputEntering__SAtwt\",\"InputEntered\":\"Login_InputEntered__Wpmau\",\"InputClosing\":\"Login_InputClosing__XBbjd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"MessagesList_List__FWKb1\",\"Message\":\"MessagesList_Message__1EvY3\",\"Sent\":\"MessagesList_Sent__UWx0E\",\"Received\":\"MessagesList_Received__23zvc\",\"Username\":\"MessagesList_Username__2MU3T\",\"Timestamp\":\"MessagesList_Timestamp__3dzyR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__34i3s\",\"FadeEnter\":\"App_FadeEnter__1uJf1\",\"FadeExit\":\"App_FadeExit__25tik\",\"FadeEnterActive\":\"App_FadeEnterActive__1Ptu1\",\"FadeExitActive\":\"App_FadeExitActive__2WYg3\"};"],"sourceRoot":""}